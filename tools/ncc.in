#!@pathperl@
# -*- perl -*-

# This file is part of the nesC compiler.
# 
# This file is derived from the RC Compiler. It is thus
#    Copyright (C) 2000-2001 The Regents of the University of California.
# Changes for nesC are
#    Copyright (C) 2002 Intel Corporation
# 
# The attached "nesC" software is provided to you under the terms and
# conditions of the GNU General Public License Version 2 as published by the
# Free Software Foundation.
# 
# nesC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with nesC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# Configuration
$cygwin = "@CYGWINHACKS@";
$prefix = "@prefix@";
$exec_prefix = "@exec_prefix@";
$TOSDIR = "@TOSDIR@";
$TOSDIR = $ENV{"TOSDIR"} if defined($ENV{"TOSDIR"});

# Have fun with the arguments

for ($i = 0; $i <= $#ARGV; $i++) {
    $strip = 0;
    $_ = $ARGV[$i];
    if (/^-/) {
	if (/^-target=(.*)/) {
	    &fail("multiple targets specified") if defined($target);
	    $target = $1;
	    $strip = 1;
	}
	elsif (/^-tosdir=(.*)/) {
	    $TOSDIR = $1;
	    $strip = 1;
	}
	elsif (/^-nostdinc$/) {
	    $nostdinc = 1;
	}
	elsif (/^-board=(.*)/) {
	    push @boards, $1;
	    $strip = 1;
	}
	elsif (/^-print-tosdir$/) {
	    $print_tosdir = 1;
	    $strip = 1;
	}
	elsif (/^-print-platforms$/) {
	    $print_platforms = 1;
	    $strip = 1;
	}
	elsif (/^-g$/) {
	    $debugging = 1;
	}
	elsif (/^-v$/) {
	    $verbose = 1;
	}
	elsif (/^-I/) {
	    ($i, $file) = &extractarg($i);
	    $strip = 1;
	    push @includes, $file;
	}
    } 

    push @new_args, $_ if !$strip;
}

# Remove trailing / from TOSDIR, if any (it confuses the topdir stuff)
chop $TOSDIR if $TOSDIR =~ m!./$!;

if ($print_tosdir)
{
    print $TOSDIR, "\n";
    exit 0;
}

if ($print_platforms)
{
    print join(" ", all_platforms()), "\n";
    exit 0;
}

$target = "mica" if !defined($target);

# First see if the directory for this platform was explicitly specified
foreach $dir (@includes) {
    if ($dir =~ m!/$target/?$! && -f "$dir/.platform") {
	$platform_def = "$dir/.platform";
	last;
    }
}

$platform_def = "$TOSDIR/platform/$target/.platform" unless $platform_def;
if (!-f $platform_def) {
    print STDERR "Unknown target $target\n";
    print STDERR "Known targets for TinyOS directory $TOSDIR\n";
    print STDERR "and the specified include directories are:\n";

    @platforms = all_platforms();
    if (@platforms) {
	print STDERR "  ", join(" ", @platforms);
    }
    else {
	print STDERR "none.";
    }
    print STDERR "\n";
    exit 2;
}

do $platform_def;

push @new_args, @opts;

# documentation: set the default topdir based on TOSDIR
my ($tosparent) = ($TOSDIR =~ m!^(.*)/.*?$!);
unshift @new_args, "-topdir=$tosparent";

unshift @new_args, "-fnesc-include=tos";
unshift @new_args, map "-DBOARD_\U$_", @boards;
unshift @new_args, "-DPLATFORM_\U$target";
unshift @new_args, "nescc";

# Execute .sensor file in selected sensor board directories if it exists
$i = 0;
BOARD: while ($i <= $#boards) {
    $board = $boards[$i];

    # First check include path for a .sensor file for this board
    foreach $dir (@includes) {
	if ($dir =~ m!/$board/?$! && -f "$dir/.sensor") {
	    # Remove from @boards so that we don't add sensorboards/$board
	    # to the search path
	    splice @boards, $i, 1;
	    do "$dir/.sensor";
	    next BOARD;
	}
    }

    # If none found, check the standard sensorboards directory
    $bspec = &idir_subst("%T/sensorboards/$board/.sensor");
    do $bspec if -f $bspec;

    $i++;
}

if (!$nostdinc) {
    push @includes, map "%T/sensorboards/$_", @boards;
    push @includes, map "%T/sensorboards/$_", @commonboards;
    push @includes, "%T/platform/$target";
    push @includes, map "%T/platform/$_", @commonplatforms;
    push @includes, "%T/interfaces";
    push @includes, "%T/types";
    push @includes, "%T/system";
}

foreach $idir (@includes) {
    $idir = &idir_subst($idir);
    push @new_args, "-I$idir";
}

print STDERR join(' ', @new_args), "\n" if $verbose;

exec @new_args;
print STDERR "Couldn't execute nescc\n";
exit 2;

sub extractarg {
    local ($i) = @_;

    if (length($ARGV[$i]) == 2) {
	$arg = $ARGV[++$i];
    }
    else {
	$arg = substr($ARGV[$i], 2);
    }
    return ($i, $arg);
}

sub idir_subst {
    local ($idir) = @_;
    local $idx = 0;

    while (($idx = index $idir, "%", $idx) >= 0) {
	$char = substr $idir, $idx + 1, 1;
	$rep = 0;
	$rep = "%" if $char eq "%";
	$rep = $TOSDIR if $char eq "T";
	$rep = $target if $char eq "p";
	&fail("unknown include-path substitution %" . $char) if !$rep;
	substr($idir, $idx, 2) = $rep;
	$idx += length $rep;
    }
    return $idir;
}

sub fail {
    print STDERR "$_[0]\n";
    exit 2;
}

sub push_platform {
    my ($p) = @_;

    push @platforms, $p unless grep $_ eq $p, @platforms;
}

sub all_platforms() {
    local(@platforms);

    foreach $dir (@includes) {
	push_platform($1) if -f "$dir/.platform" && $dir =~ m!/([^/]*)/?$!;
    }

    if (opendir PLATFORMS, "$TOSDIR/platform") {
	foreach $d (readdir PLATFORMS) {
	    push_platform($d) if (-f "$TOSDIR/platform/$d/.platform");
	}
	closedir PLATFORMS;
    }

    return @platforms;
}
