#!@pathperl@
# -*- perl -*-

# This file is part of the nesC compiler.
# 
# This file is derived from the RC Compiler. It is thus
#    Copyright (C) 2000-2001 The Regents of the University of California.
# Changes for nesC are
#    Copyright (C) 2002 Intel Corporation
# 
# The attached "nesC" software is provided to you under the terms and
# conditions of the GNU General Public License Version 2 as published by the
# Free Software Foundation.
# 
# nesC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with nesC; see the file COPYING.  If not, write to
# the Free Software Foundation, 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# Configuration
$cygwin = "@CYGWINHACKS@";
$prefix = "@prefix@";
$exec_prefix = "@exec_prefix@";
$NCDIR = "@libdir@/ncc";
$TOSDIR = "@TOSDIR@";
$TOSDIR = $ENV{"TOSDIR"} if defined($ENV{"TOSDIR"});

# Runtime configuration
$ENV{"PATH"} = "$NCDIR:$ENV{PATH}";

# Have fun with the arguments

for ($i = 0; $i <= $#ARGV; $i++) {
    $strip = 0;
    $_ = $ARGV[$i];
    if (/^-/) {
	if (/^-target=(.*)/) {
	    &fail("multiple targets specified") if defined($target);
	    $target = $1;
	    $strip = 1;
	}
	elsif (/^-tosdir=(.*)/) {
	    $TOSDIR = $1;
	    $strip = 1;
	}
	elsif (/^-nostdinc$/) {
	    $nostdinc = 1;
	}
	elsif (/^-board=(.*)/) {
	    push @boards, $1;
	    $strip = 1;
	}
	elsif (/^-docdir=(.*)/) {
            $docdir = $1;
	    $strip = 1;
	}
	elsif (/^-topdir=(.*)/) {
            push @topdirs, $1;
	    $strip = 1;
	}
	elsif (/^-graphviz=(.*)/) {
            if($1 =~ /^y/i) {
                $use_graphviz = 1;
            } else {
                $use_graphviz = 0;
            }
	    $strip = 1;
	}
	elsif (/^-print-tosdir$/) {
	    $print_tosdir = 1;
	    $strip = 1;
	}
	elsif (/^--version$/) {
	    $print_version = 1;
	    $strip = 1;
	}
    } 

    push @new_args, $_ if !$strip;
}

if ($print_tosdir)
{
    print $TOSDIR, "\n";
    exit 0;
}

$target = "mica" if !defined($target);
#@boards = ("basicsb") if !defined(@boards);


#
# target options 
#
if ($target eq "pc") {
    $gcc = "gcc";
    push @new_args, "-fnesc-target=pc";
}
elsif ($target eq "mica") {
    $gcc = "avr-gcc";
    push @new_args, ("-mmcu=atmega103", "-fnesc-target=avr");
    @commonplatforms = ("avrmote");
}
elsif ($target eq "mica128") {
    $gcc = "avr-gcc";
    push @new_args, ("-mmcu=atmega128", "-fnesc-target=avr");
    @commonplatforms = ("mica", "avrmote");
}
elsif ($target eq "rene2") {
    $gcc = "avr-gcc";
    push @new_args, ("-mmcu=atmega163", "-fnesc-target=avr");
    @commonplatforms = ("avrmote");
}
elsif ($target eq "motor") {
    $gcc = "avr-gcc";
    push @new_args, ("-mmcu=atmega161", "-fnesc-target=avr");
    @commonplatforms = ("avrmote");
}
else {
    &fail("unknown target $target\n(known targets are pc, mica, mica128, rene2)");
}

if ($print_version) {
    print "ncc: @PACKAGE_VERSION@\n";
    print "$gcc: ";
    system "$gcc --version";
    exit 0;
}


#
# documentation generation options
#
if( defined($docdir) ) {
    # add the doc output dir
    push @new_args, "-fnesc-docdir=$docdir";
    
    # get the directory above TOSDIR
    my ($tosparent) = ($TOSDIR =~ m!^(.*)/.*?$!);
    push @topdirs, $tosparent;

    # add top level dirs, to strip out of package names
    foreach my $dir (@topdirs) {
        push @new_args, "-fnesc-topdir=$dir";
    }

    # add graphviz option
    if( defined($use_graphviz) ) {
        push @new_args, "-fnesc-docs-use-graphviz" if($use_graphviz);
    } else {
        my $dot = `which dot 2>&1`;
        push @new_args, "-fnesc-docs-use-graphviz" if($dot !~ /^\s*$/);
    }
}


unshift @new_args, map "-DBOARD_\U$_", @boards;
unshift @new_args, "-DPLATFORM_\U$target";
unshift @new_args, "-specs=$NCDIR/tdspecs";
unshift @new_args, $gcc;

if (!$nostdinc) {
    push @new_args, map "-I$TOSDIR/sensorboards/$_", @boards;
    push @new_args, "-I$TOSDIR/platform/$target";
    push @new_args, map "-I$TOSDIR/platform/$_", @commonplatforms;
    push @new_args, "-I$TOSDIR/interfaces";
    push @new_args, "-I$TOSDIR/types";
    push @new_args, "-I$TOSDIR/system";
    push @new_args, "-I$TOSDIR/lib";
}

if ($gcc eq "avr-gcc" && $cygwin) {
    # Yuck. Convert unix paths to windows paths
    @ARGV = @new_args;
    @new_args = ();
    for ($i = 0; $i <= $#ARGV; $i++) {
	$_ = $ARGV[$i];
	if (/^-/) {
	    if (/^-[oIL]/) {
		# convert argument filename which may be in same arg
		$opt = substr $_, 1, 1;
		($i, $file) = &extractarg($i);
		$file = &winpath($file);
		push @new_args, "-$opt$file";
	    }
	    elsif (/^-[xubV]/) {
		# pass option and arg through unchanged
		$opt = substr $_, 1, 1;
		($i, $arg) = &extractarg($i);
		push @new_args, "-$opt$arg";
	    }
	    elsif ($i < $#ARGV &&
		(/^-idirafter$/ || /^-include$/ || /^-imacros$/ ||
		 /^-iprefix$/ || /^-iwithprefix$/ || /^-iwithprefixbefore$/ ||
		 /^-isystem$/ || /^-Xlinker$/)) {
		# convert argument filename which is in next arg
		push @new_args, $_;
		push @new_args, &winpath($ARGV[++$i]);
	    }
	    elsif (/^-specs=(.*)$/) {
		# convert argument filename
		$path = &winpath($1);
		push @new_args, "-specs=$path";
	    }
	    else {
		push @new_args, $_;
	    }
	}
	else {
	    push @new_args, &winpath($_);
	}
    }
}

#print STDERR "EXECUTING: ", join(' ', @new_args), "\n";
exec @new_args;
print STDERR "Couldn't execute $gcc\n";
exit 2;

sub extractarg {
    local ($i) = @_;

    if (length($ARGV[$i]) == 2) {
	$arg = $ARGV[++$i];
    }
    else {
	$arg = substr($ARGV[$i], 2);
    }
    return ($i, $arg);
}

sub fail {
    print STDERR "$_[0]\n";
    exit 2;
}

sub winpath {
    my ($path) = @_;
    $path = `cygpath -w $path`;
    chop $path;

    return $path;
}
