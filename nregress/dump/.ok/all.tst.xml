<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="46:basic/Blink.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb7e1af18"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb7e0ac18"/></to>
    </wire>
    <wire loc="47:basic/Blink.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb7e1af18"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb7e187f0"/></to>
    </wire>
    <wire loc="55:basic/SingleTimer.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb7e0ac18"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb7e044d8"/></to>
    </wire>
    <wire loc="48:basic/Blink.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7e12d48"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7e0a750"/></to>
    </wire>
    <wire loc="54:basic/SingleTimer.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7e0a750"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7e04010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="49:basic/Blink.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb7e0d9a8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb7dc9470"/></to>
    </wire>
    <wire loc="51:basic/Main.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb7e17010"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb7e1af18"/></to>
    </wire>
    <wire loc="62:basic/TimerC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0xb7e044d8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0xb7e00cc8"/></to>
    </wire>
    <wire loc="63:basic/TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0xb7e04010"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0xb7e00800"/></to>
    </wire>
    <wire loc="59:basic/TimerC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0xb7dff248"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0xb7dc9470"/></to>
    </wire>
    <wire loc="60:basic/TimerC.nc">
      <from><interface-ref name="Clock" scoped="" ref="0xb7df3900"/></from>
      <to><interface-ref name="Clock" scoped="" ref="0xb7e029e8"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="Blink" loc="40:basic/Blink.nc">
      <configuration/>
    </component>
    <component qname="Main" loc="44:basic/Main.nc">
      <documentation loc="44:basic/Main.nc">
        <short>&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="RealMain" loc="45:basic/RealMain.nc">
      <documentation loc="45:basic/RealMain.nc">
        <short>&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkM" loc="36:basic/BlinkM.nc">
      <documentation loc="36:basic/BlinkM.nc">
        <short>&#10; Implementation for Blink application. </short>
        <long>&#10; Implementation for Blink application.  Toggle the red LED when a&#10; Timer fires.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SingleTimer" loc="46:basic/SingleTimer.nc">
      <documentation loc="46:basic/SingleTimer.nc">
        <short>&#10; @author Phil Levis&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="TimerC" loc="51:basic/TimerC.nc">
      <documentation loc="51:basic/TimerC.nc">
        <short>&#10; @author Su Ping&#10; @author (converted to nesC by Sam Madden)&#10; @author David Gay&#10; @author Intel Research Berkeley Lab&#10; @author Phil Levis&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="TimerM" loc="48:basic/TimerM.nc">
      <documentation loc="48:basic/TimerM.nc">
        <short>&#10; @author Su Ping &#60;sping@intel-research.net>&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="ClockC" loc="54:basic/ClockC.nc">
      <documentation loc="54:basic/ClockC.nc">
        <short>&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="NoLeds" loc="46:basic/NoLeds.nc">
      <documentation loc="46:basic/NoLeds.nc">
        <short>&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</short>
      </documentation>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="StdControl" ref="0xb7e1af18" loc="45:basic/Main.nc">
      <component-ref qname="Main"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7e1af18"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7e1c0f0"/>
        <function-ref name="start" scoped="" ref="0xb7e1c1c0"/>
        <function-ref name="stop" scoped="" ref="0xb7e1c290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StdControl" ref="0xb7e17010" loc="47:basic/RealMain.nc">
      <component-ref qname="RealMain"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7e17010"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7e171d8"/>
        <function-ref name="start" scoped="" ref="0xb7e172a8"/>
        <function-ref name="stop" scoped="" ref="0xb7e17378"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb7e0d9a8" loc="43:basic/BlinkM.nc">
      <component-ref qname="BlinkM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Leds" scoped="" ref="0xb7e0d9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="yellowOff" scoped="" ref="0xb7e0db70"/>
        <function-ref name="yellowOn" scoped="" ref="0xb7e0dc40"/>
        <function-ref name="init" scoped="" ref="0xb7e0dd10"/>
        <function-ref name="greenOff" scoped="" ref="0xb7e0dde0"/>
        <function-ref name="redOff" scoped="" ref="0xb7e0deb0"/>
        <function-ref name="greenToggle" scoped="" ref="0xb7e15010"/>
        <function-ref name="get" scoped="" ref="0xb7e150e0"/>
        <function-ref name="yellowToggle" scoped="" ref="0xb7e151b0"/>
        <function-ref name="redToggle" scoped="" ref="0xb7e15280"/>
        <function-ref name="set" scoped="" ref="0xb7e15350"/>
        <function-ref name="redOn" scoped="" ref="0xb7e15420"/>
        <function-ref name="greenOn" scoped="" ref="0xb7e154f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb7e187f0" loc="39:basic/BlinkM.nc">
      <component-ref qname="BlinkM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7e187f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7e189b8"/>
        <function-ref name="start" scoped="" ref="0xb7e18a88"/>
        <function-ref name="stop" scoped="" ref="0xb7e18b58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0xb7e12d48" loc="42:basic/BlinkM.nc">
      <component-ref qname="BlinkM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Timer" scoped="" ref="0xb7e12d48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb7e12f10"/>
        <function-ref name="start" scoped="" ref="0xb7e23010"/>
        <function-ref name="stop" scoped="" ref="0xb7e230e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb7e0ac18" loc="48:basic/SingleTimer.nc">
      <component-ref qname="SingleTimer"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7e0ac18"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7e0ade0"/>
        <function-ref name="start" scoped="" ref="0xb7e0aeb0"/>
        <function-ref name="stop" scoped="" ref="0xb7e09010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7e0a750" loc="47:basic/SingleTimer.nc">
      <component-ref qname="SingleTimer"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Timer" scoped="" ref="0xb7e0a750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb7e0a918"/>
        <function-ref name="start" scoped="" ref="0xb7e0a9e8"/>
        <function-ref name="stop" scoped="" ref="0xb7e0aab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb7e044d8" loc="53:basic/TimerC.nc">
      <component-ref qname="TimerC"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7e044d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7e046a0"/>
        <function-ref name="start" scoped="" ref="0xb7e04770"/>
        <function-ref name="stop" scoped="" ref="0xb7e04840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7e04010" loc="52:basic/TimerC.nc">
      <component-ref qname="TimerC"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Timer" scoped="" ref="0xb7e04010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb7e041d8"/>
        <function-ref name="start" scoped="" ref="0xb7e042a8"/>
        <function-ref name="stop" scoped="" ref="0xb7e04378"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Clock" ref="0xb7df3900" loc="53:basic/TimerM.nc">
      <component-ref qname="TimerM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Clock" scoped="" ref="0xb7df3900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Clock"/>
      </instance>
      <interface-functions>
        <function-ref name="setCounter" scoped="" ref="0xb7df3ac8"/>
        <function-ref name="intEnable" scoped="" ref="0xb7df3b98"/>
        <function-ref name="setNextScale" scoped="" ref="0xb7df3c68"/>
        <function-ref name="setInterval" scoped="" ref="0xb7df3d38"/>
        <function-ref name="setIntervalAndScale" scoped="" ref="0xb7df3e08"/>
        <function-ref name="getScale" scoped="" ref="0xb7df3ed8"/>
        <function-ref name="readCounter" scoped="" ref="0xb7dfd010"/>
        <function-ref name="setRate" scoped="" ref="0xb7dfd0e0"/>
        <function-ref name="setNextInterval" scoped="" ref="0xb7dfd1b0"/>
        <function-ref name="getInterval" scoped="" ref="0xb7dfd280"/>
        <function-ref name="intDisable" scoped="" ref="0xb7dfd350"/>
        <function-ref name="fire" scoped="" ref="0xb7dfd420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0xb7dff248" loc="52:basic/TimerM.nc">
      <component-ref qname="TimerM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Leds" scoped="" ref="0xb7dff248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="yellowOff" scoped="" ref="0xb7dff410"/>
        <function-ref name="yellowOn" scoped="" ref="0xb7dff4e0"/>
        <function-ref name="init" scoped="" ref="0xb7dff5b0"/>
        <function-ref name="greenOff" scoped="" ref="0xb7dff680"/>
        <function-ref name="redOff" scoped="" ref="0xb7dff750"/>
        <function-ref name="greenToggle" scoped="" ref="0xb7dff820"/>
        <function-ref name="get" scoped="" ref="0xb7dff8f0"/>
        <function-ref name="yellowToggle" scoped="" ref="0xb7dff9c0"/>
        <function-ref name="redToggle" scoped="" ref="0xb7dffa90"/>
        <function-ref name="set" scoped="" ref="0xb7dffb60"/>
        <function-ref name="redOn" scoped="" ref="0xb7dffc30"/>
        <function-ref name="greenOn" scoped="" ref="0xb7dffd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb7e00cc8" loc="50:basic/TimerM.nc">
      <component-ref qname="TimerM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7e00cc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7e00e90"/>
        <function-ref name="start" scoped="" ref="0xb7dff010"/>
        <function-ref name="stop" scoped="" ref="0xb7dff0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0xb7e00800" loc="49:basic/TimerM.nc">
      <component-ref qname="TimerM"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Timer" scoped="" ref="0xb7e00800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0xb7e009c8"/>
        <function-ref name="start" scoped="" ref="0xb7e00a98"/>
        <function-ref name="stop" scoped="" ref="0xb7e00b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Clock" ref="0xb7e029e8" loc="55:basic/ClockC.nc">
      <component-ref qname="ClockC"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Clock" scoped="" ref="0xb7e029e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Clock"/>
      </instance>
      <interface-functions>
        <function-ref name="setCounter" scoped="" ref="0xb7e02bb0"/>
        <function-ref name="intEnable" scoped="" ref="0xb7e02c80"/>
        <function-ref name="setNextScale" scoped="" ref="0xb7e02d50"/>
        <function-ref name="setInterval" scoped="" ref="0xb7e02e20"/>
        <function-ref name="setIntervalAndScale" scoped="" ref="0xb7e02ef0"/>
        <function-ref name="getScale" scoped="" ref="0xb7dd9010"/>
        <function-ref name="readCounter" scoped="" ref="0xb7dd90e0"/>
        <function-ref name="setRate" scoped="" ref="0xb7dd91b0"/>
        <function-ref name="setNextInterval" scoped="" ref="0xb7dd9280"/>
        <function-ref name="getInterval" scoped="" ref="0xb7dd9350"/>
        <function-ref name="intDisable" scoped="" ref="0xb7dd9420"/>
        <function-ref name="fire" scoped="" ref="0xb7dd94f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0xb7dd9650" loc="56:basic/ClockC.nc">
      <component-ref qname="ClockC"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="StdControl" scoped="" ref="0xb7dd9650"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0xb7dd9818"/>
        <function-ref name="start" scoped="" ref="0xb7dd98e8"/>
        <function-ref name="stop" scoped="" ref="0xb7dd99b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0xb7dc9470" loc="47:basic/NoLeds.nc">
      <component-ref qname="NoLeds"/>
      <type-interface size="I:4" alignment="I:4"><interface-ref name="Leds" scoped="" ref="0xb7dc9470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="yellowOff" scoped="" ref="0xb7dc9638"/>
        <function-ref name="yellowOn" scoped="" ref="0xb7dc9708"/>
        <function-ref name="init" scoped="" ref="0xb7dc97d8"/>
        <function-ref name="greenOff" scoped="" ref="0xb7dc98a8"/>
        <function-ref name="redOff" scoped="" ref="0xb7dc9978"/>
        <function-ref name="greenToggle" scoped="" ref="0xb7dc9a48"/>
        <function-ref name="get" scoped="" ref="0xb7dc9b18"/>
        <function-ref name="yellowToggle" scoped="" ref="0xb7dc9be8"/>
        <function-ref name="redToggle" scoped="" ref="0xb7dc9cb8"/>
        <function-ref name="set" scoped="" ref="0xb7dc9d88"/>
        <function-ref name="redOn" scoped="" ref="0xb7dc9e58"/>
        <function-ref name="greenOn" scoped="" ref="0xb7dc9f28"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Clock" loc="49:basic/Clock.nc">
      <documentation loc="49:basic/Clock.nc">
        <short>&#10; The hardware clock interface. &#10;</short>
        <long>&#10; The hardware clock interface. &#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Nelson Lee&#10;</long>
      </documentation>
      <function command="" provided="0" name="setCounter" ref="0xb7dfae18" loc="162:basic/Clock.nc">
        <documentation loc="155:basic/Clock.nc">
          <short>&#10;  Set HW clock counter to a specified value&#10;&#10;  @param n Value to write to TCNT0&#10;&#10;  @return None&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0xb7dfac58" loc="162:basic/Clock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="intEnable" ref="0xb7df3488" loc="174:basic/Clock.nc">
        <documentation loc="171:basic/Clock.nc">
          <short>&#10;  Enable Clock interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setNextScale" ref="0xb7df8f20" loc="137:basic/Clock.nc">
        <documentation loc="130:basic/Clock.nc">
          <short>&#10;  Set clock scale at next clock interrupt time &#10; &#10;  @param scale New clock scale&#10;&#10;  @return none&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0xb7df8d60" loc="137:basic/Clock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterval" ref="0xb7df9e78" loc="105:basic/Clock.nc">
        <documentation loc="98:basic/Clock.nc">
          <short>&#10;  Set clock interval &#10; &#10;  @param value New clock interval&#10;&#10;  @return none&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0xb7df9cd0" loc="105:basic/Clock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setIntervalAndScale" ref="0xb7dfa5f8" loc="148:basic/Clock.nc">
        <documentation loc="139:basic/Clock.nc">
          <short>&#10;  Set both clock interval and scale&#10; &#10;  @param interval New clock interval&#10;&#10;  @param scale New clock scale&#10;&#10;  @return SUCCESS or FAILED &#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="interval" ref="0xb7dfa290" loc="148:basic/Clock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
          <variable name="scale" ref="0xb7dfa408" loc="148:basic/Clock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0xb7df8a30" loc="128:basic/Clock.nc">
        <documentation loc="123:basic/Clock.nc">
          <short>&#10;  Get clock scale &#10; &#10;  @return current clock scale level&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="readCounter" ref="0xb7dfa928" loc="153:basic/Clock.nc">
        <documentation loc="150:basic/Clock.nc">
          <short>&#10;  Read HW clock counter&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="setRate" ref="0xb7df99a0" loc="96:basic/Clock.nc">
        <documentation loc="51:basic/Clock.nc">
          <short>&#10;  Set the clock rate. </short>
          <long>&#10;  Set the clock rate.  For the specific meanings of interval&#10; and scale, refer to the processor data sheet. For the mica and rene:&#10; &#60;p>&#10; &#60;pre>&#10;     Clock scale&#10;         0 - off&#10;         1 - 32768 ticks/second&#10;         2 - 4096 ticks/second&#10;         3 - 1024 ticks/second&#10;         4 - 512 ticks/second&#10;         5 - 256 ticks/second&#10;         6 - 128 ticks/second&#10;         7 - 32 ticks/second&#10; &#60;/pre>&#10; &#60;p>&#10;&#10; Interval is how many ticks per clock firing.&#10; For example, setRate(160,7) will result in an event every 160/32&#10; seconds.&#10;&#10; See also: &#60;code>Clock.h&#60;/code> for predefined macros:&#10;&#10; &#60;p>&#10; &#60;pre>&#10;  interval      scale         result&#10;  TOS_I1000PS   TOS_S1000PS   1000 ticks/sec&#10;  TOS_I100PS    TOS_S100PS     100 ticks/sec&#10;  TOS_I10PS     TOS_S10PS       10 ticks/sec&#10;  TOS_I4096PS   TOS_S4096PS   4096 ticks/sec&#10;  TOS_I2048PS   TOS_S2048PS   2048 ticks/sec&#10;  TOS_I1024PS   TOS_S1024PS   1024 ticks/sec&#10;  TOS_I512PS    TOS_S512PS     512 ticks/sec&#10;  TOS_I256PS    TOS_S256PS     256 ticks/sec&#10;  TOS_I128PS    TOS_S128PS     128 ticks/sec&#10;  TOS_I64PS     TOS_S64PS       64 ticks/sec&#10;  TOS_I32PS     TOS_S32PS       32 ticks/sec&#10;  TOS_I16PS     TOS_S16PS       16 ticks/sec&#10;  TOS_I8PS      TOS_S8PS         8 ticks/sec&#10;  TOS_I4PS      TOS_S4PS         4 ticks/sec&#10;  TOS_I2PS      TOS_S2PS         2 ticks/sec&#10;  TOS_I1PS      TOS_S1PS         1 tick/sec&#10;  TOS_I0PS      TOS_S0PS         0 ticks/sec (clock off)&#10; &#60;/pre>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="interval" ref="0xb7df9128" loc="96:basic/Clock.nc">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </variable>
          <variable name="scale" ref="0xb7df9298" loc="96:basic/Clock.nc">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNextInterval" ref="0xb7df8390" loc="114:basic/Clock.nc">
        <documentation loc="107:basic/Clock.nc">
          <short>&#10;  Set clock interval at next clock interrupt time&#10; &#10;  @param value New clock interval&#10;&#10;  @return none&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0xb7df81d0" loc="114:basic/Clock.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterval" ref="0xb7df86e0" loc="121:basic/Clock.nc">
        <documentation loc="116:basic/Clock.nc">
          <short>&#10;  Get clock interval &#10; &#10;  @return current clock interval&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="intDisable" ref="0xb7df3160" loc="168:basic/Clock.nc">
        <documentation loc="165:basic/Clock.nc">
          <short>&#10;  Disable Clock interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function event="" provided="0" name="fire" ref="0xb7df37c8" loc="180:basic/Clock.nc">
        <documentation loc="177:basic/Clock.nc">
          <short>&#10;  An event sent when the clock goes off.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Clock"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="46:basic/Leds.nc">
      <documentation loc="46:basic/Leds.nc">
        <short>&#10; Abstraction of the LEDs.&#10;&#10;</short>
        <long>&#10; Abstraction of the LEDs.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="yellowOff" ref="0xb7e0ec18" loc="122:basic/Leds.nc">
        <documentation loc="116:basic/Leds.nc">
          <short>&#10; Turn the yellow LED off.&#10;&#10;</short>
          <long>&#10; Turn the yellow LED off.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="yellowOn" ref="0xb7e0e8a8" loc="114:basic/Leds.nc">
        <documentation loc="108:basic/Leds.nc">
          <short>&#10; Turn the yellow LED on.&#10;&#10;</short>
          <long>&#10; Turn the yellow LED on.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="init" ref="0xb7e10010" loc="56:basic/Leds.nc">
        <documentation loc="48:basic/Leds.nc">
          <short>&#10; Initialize the LEDs; among other things, initialization turns&#10; them all off.&#10;&#10;</short>
          <long>&#10; Initialize the LEDs; among other things, initialization turns&#10; them all off.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="greenOff" ref="0xb7e0e198" loc="97:basic/Leds.nc">
        <documentation loc="91:basic/Leds.nc">
          <short>&#10; Turn the green LED off.&#10;&#10;</short>
          <long>&#10; Turn the green LED off.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="redOff" ref="0xb7e106e0" loc="72:basic/Leds.nc">
        <documentation loc="66:basic/Leds.nc">
          <short>&#10; Turn the red LED off.&#10;&#10;</short>
          <long>&#10; Turn the red LED off.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="greenToggle" ref="0xb7e0e538" loc="106:basic/Leds.nc">
        <documentation loc="99:basic/Leds.nc">
          <short>&#10; Toggle the green LED.</short>
          <long>&#10; Toggle the green LED. If it was on, turn it off. If it was off,&#10; turn it on.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="get" ref="0xb7e0d378" loc="139:basic/Leds.nc">
        <documentation loc="133:basic/Leds.nc">
          <short>&#10; Get current Leds information&#10;&#10; @return A uint8_t typed value representing Leds status&#10;&#10;</short>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="yellowToggle" ref="0xb7e0d010" loc="131:basic/Leds.nc">
        <documentation loc="124:basic/Leds.nc">
          <short>&#10; Toggle the yellow LED.</short>
          <long>&#10; Toggle the yellow LED. If it was on, turn it off. If it was off,&#10; turn it on.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="redToggle" ref="0xb7e10a80" loc="81:basic/Leds.nc">
        <documentation loc="74:basic/Leds.nc">
          <short>&#10; Toggle the red LED.</short>
          <long>&#10; Toggle the red LED. If it was on, turn it off. If it was off,&#10; turn it on.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="set" ref="0xb7e0d870" loc="149:basic/Leds.nc">
        <documentation loc="141:basic/Leds.nc">
          <short>&#10; Set Leds to a specified value&#10;&#10; @param value ranging from 0 to 7 inclusive&#10;&#10; @return SUCCESS Always&#10;&#10;</short>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0xb7e0d6b0" loc="149:basic/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="redOn" ref="0xb7e10378" loc="64:basic/Leds.nc">
        <documentation loc="58:basic/Leds.nc">
          <short>&#10; Turn the red LED on.&#10;&#10;</short>
          <long>&#10; Turn the red LED on.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="greenOn" ref="0xb7e10de8" loc="89:basic/Leds.nc">
        <documentation loc="83:basic/Leds.nc">
          <short>&#10; Turn the green LED on.&#10;&#10;</short>
          <long>&#10; Turn the green LED on.&#10;&#10; @return SUCCESS always.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="56:basic/StdControl.nc">
      <documentation loc="56:basic/StdControl.nc">
        <short>&#10; The TinyOS standard control interface.</short>
        <long>&#10; The TinyOS standard control interface. All components that require&#10; initialization or can be powered down should provide this&#10; interface. start() and stop() are synonymous with powering on and&#10; off, when appropriate.&#10;&#10; On boot, the init() of all wired components must be called. init()&#10; may be called multiple times, and in subcomponents before some of&#10; their supercomponents (e.g. if they are the subcomponent of&#10; multiple components). After init() has been called, start() and&#10; stop() may be called multiple times, in any order. The call&#10; sequence is therefore:&#10;&#10; &#60;p>init* (start|stop)*&#60;/p>&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @modified  6/25/02&#10;&#10;&#10;</long>
      </documentation>
      <attribute-value>
        <attribute-ref name="useful" ref="0xb7e1e448"/>
        <value-structured>
          <type-tag size="I:8" alignment="I:4"><attribute-ref name="useful" ref="0xb7e1e448"/></type-tag>
          <structured-element field="y" ref="0xb7e1e6d0">
            <value cst="S:yeah">
              <type-pointer size="I:4" alignment="I:4">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-pointer>
            </value>
          </structured-element>
          <structured-element field="x" ref="0xb7e1e670">
            <value cst="I:3">
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </value>
          </structured-element>
        </value-structured>
      </attribute-value>
      <function command="" provided="0" name="init" ref="0xb7e1a010" loc="63:basic/StdControl.nc">
        <documentation loc="58:basic/StdControl.nc">
          <short>&#10; Initialize the component and its subcomponents.&#10;&#10;</short>
          <long>&#10; Initialize the component and its subcomponents.&#10;&#10; @return Whether initialization was successful.&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <attribute-value>
          <attribute-ref name="empty" ref="0xb7e1e2d8"/>
          <value-structured>
            <type-tag size="I:0" alignment="I:1"><attribute-ref name="empty" ref="0xb7e1e2d8"/></type-tag>
          </value-structured>
        </attribute-value>
      </function>
      <function command="" provided="0" name="start" ref="0xb7e1a7e0" loc="70:basic/StdControl.nc">
        <documentation loc="65:basic/StdControl.nc">
          <short>&#10; Start the component and its subcomponents.&#10;&#10;</short>
          <long>&#10; Start the component and its subcomponents.&#10;&#10; @return Whether starting was successful.&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <attribute-value>
          <attribute-ref name="useful" ref="0xb7e1e448"/>
          <value-structured>
            <type-tag size="I:8" alignment="I:4"><attribute-ref name="useful" ref="0xb7e1e448"/></type-tag>
            <structured-element field="y" ref="0xb7e1e6d0">
              <value cst="S:start">
                <type-pointer size="I:4" alignment="I:4">
                  <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
              </value>
            </structured-element>
            <structured-element field="x" ref="0xb7e1e670">
              <value cst="I:1">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              </value>
            </structured-element>
          </value-structured>
        </attribute-value>
      </function>
      <function command="" provided="0" name="stop" ref="0xb7e1adc0" loc="78:basic/StdControl.nc">
        <documentation loc="72:basic/StdControl.nc">
          <short>&#10; Stop the component and pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10;</short>
          <long>&#10; Stop the component and pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return Whether stopping was successful.&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <attribute-value>
          <attribute-ref name="useful" ref="0xb7e1e448"/>
          <value-structured>
            <type-tag size="I:8" alignment="I:4"><attribute-ref name="useful" ref="0xb7e1e448"/></type-tag>
            <structured-element field="x" ref="0xb7e1e670">
              <value cst="I:2">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              </value>
            </structured-element>
          </value-structured>
        </attribute-value>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:basic/Timer.nc">
      <documentation loc="42:basic/Timer.nc">
        <short>&#10; This interface provides a generic timer that can be used to generate&#10; events at regular intervals.&#10;&#10;</short>
        <long>&#10; This interface provides a generic timer that can be used to generate&#10; events at regular intervals.&#10;&#10; @author Su Ping&#10; @author Sam Madden&#10; @author David Gay&#10; @modified 7/16/02&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0xb7e12c10" loc="73:basic/Timer.nc">
        <documentation loc="70:basic/Timer.nc">
          <short>&#10; The signal generated by the timer when it fires.&#10;</short>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
      <function command="" provided="0" name="start" ref="0xb7e124b8" loc="59:basic/Timer.nc">
        <documentation loc="44:basic/Timer.nc">
          <short>&#10; Start the timer. &#10;</short>
          <long>&#10; Start the timer. &#10; @param type The type of timer to start. Valid values include&#10;  'TIMER_REPEAT' for a timer that fires repeatedly, or &#10;  'TIMER_ONE_SHOT' for a timer that fires once.&#10;  @param interval The timer interval in &#60;b>binary milliseconds&#60;/b> (1/1024&#10;  second). Note that the &#10;    timer cannot support an arbitrary range of intervals.&#10;    (Unfortunately this interface does not specify the valid range&#10;    of timer intervals, which are specific to a platform.)&#10;  @return Returns SUCCESS if the timer could be started with the &#10;    given type and interval. Returns FAIL if the type is not&#10;    one of TIMER_REPEAT or TIMER_ONE_SHOT, if the timer rate is&#10;    too high, or if there are too many timers currently active.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7fb0390"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0xb7e0feb0" loc="59:basic/Timer.nc">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </variable>
          <variable name="interval" ref="0xb7e12068" loc="59:basic/Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0xb7fb0390"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0xb7e128e8" loc="68:basic/Timer.nc">
        <documentation loc="61:basic/Timer.nc">
          <short>&#10; Stop the timer, preventing it from firing again.&#10;</short>
          <long>&#10; Stop the timer, preventing it from firing again.&#10; If this is a TIMER_ONE_SHOT timer and it has not fired yet,&#10; prevents it from firing.&#10; @return SUCCESS if the timer could be stopped, or FAIL if the timer &#10; is not running or the timer ID is out of range.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e25de0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
    <struct ref="0xb7fbcd38" size="V:" alignment="V:">
    </struct>
    <attribute name="number"  loc="NONE" ref="0xb7fba960" size="V:" alignment="V:">
    </attribute>
    <attribute name="integer"  loc="NONE" ref="0xb7fba820" size="V:" alignment="V:">
    </attribute>
    <attribute name="combine"  loc="NONE" ref="0xb7fb8298" size="V:" alignment="V:">
      <field name="fn" ref="0xb7fb8380" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <attribute name="exactlyonce" loc="20:basic/tos.h" ref="0xb7e1eb30" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="3:basic/tos.h" ref="0xb7e21140" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atmostonce" loc="18:basic/tos.h" ref="0xb7e1e7c0" defined="" size="I:0" alignment="I:1">
    </attribute>
    <attribute name="hwevent"  loc="NONE" ref="0xb7fbae58" size="V:" alignment="V:">
    </attribute>
    <attribute name="useful" loc="16:basic/tos.h" ref="0xb7e1e448" defined="" size="I:8" alignment="I:4">
      <field name="x" ref="0xb7e1e670" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="y" ref="0xb7e1e6d0" bit-offset="I:32" size="I:4">
        <type-pointer size="I:4" alignment="I:4">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <attribute name="atleastonce" loc="19:basic/tos.h" ref="0xb7e1e9b8" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="48:basic/Clock.h" ref="0xb7df48c8" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="spontaneous"  loc="NONE" ref="0xb7fb8158" size="V:" alignment="V:">
    </attribute>
    <enum loc="39:basic/Timer.h" ref="0xb7e0f178" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="empty" loc="15:basic/tos.h" ref="0xb7e1e2d8" defined="" size="I:0" alignment="I:1">
    </attribute>
    <attribute name="C"  loc="NONE" ref="0xb7fbad18" size="V:" alignment="V:">
    </attribute>
    <struct loc="288:/usr/include/inttypes.h" ref="0xb7fac950" defined="" size="I:16" alignment="I:8">
      <field name="quot" ref="0xb7faca38" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0xb7faca98" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <enum loc="34:basic/Clock.h" ref="0xb7df6308" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atomic_hwevent"  loc="NONE" ref="0xb7fb8010" size="V:" alignment="V:">
    </attribute>
    <enum loc="62:basic/BlinkM.nc" ref="0xb7e15880" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="BlinkM"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="73:basic/TimerM.nc" ref="0xb7dfcbf8" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TimerM"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="timer_s" loc="67:basic/TimerM.nc" ref="0xb7dfc5b8" defined="" scoped="" size="I:12" alignment="I:4">
      <component-ref qname="TimerM"/>
      <field name="type" ref="0xb7dfc8c0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0xb7fb1ec8"/></typename>
        </type-int>
      </field>
      <field name="ticks" ref="0xb7dfc920" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="int32_t" ref="0xb7fb1ad8"/></typename>
        </type-int>
      </field>
      <field name="ticksLeft" ref="0xb7dfc980" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4">
          <typename><typedef-ref name="int32_t" ref="0xb7fb1ad8"/></typename>
        </type-int>
      </field>
    </struct>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
