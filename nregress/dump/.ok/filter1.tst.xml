<nesc xmlns="http://www.tinyos.net/nesC">
  <components>
  </components>
  <interfaces>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="StdControl" loc="56:basic/StdControl.nc">
      <documentation loc="56:basic/StdControl.nc">
        <short>&#10; The TinyOS standard control interface.</short>
        <long>&#10; The TinyOS standard control interface. All components that require&#10; initialization or can be powered down should provide this&#10; interface. start() and stop() are synonymous with powering on and&#10; off, when appropriate.&#10;&#10; On boot, the init() of all wired components must be called. init()&#10; may be called multiple times, and in subcomponents before some of&#10; their supercomponents (e.g. if they are the subcomponent of&#10; multiple components). After init() has been called, start() and&#10; stop() may be called multiple times, in any order. The call&#10; sequence is therefore:&#10;&#10; &#60;p>init* (start|stop)*&#60;/p>&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @modified  6/25/02&#10;&#10;&#10;</long>
      </documentation>
      <attribute-value>
        <attribute-ref name="useful" ref="0xb7e38448"/>
        <value-structured>
          <type-tag size="I:8" alignment="I:4"><attribute-ref name="useful" ref="0xb7e38448"/></type-tag>
          <structured-element field="y" ref="0xb7e386d0">
            <value cst="S:yeah">
              <type-pointer size="I:4" alignment="I:4">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-pointer>
            </value>
          </structured-element>
          <structured-element field="x" ref="0xb7e38670">
            <value cst="I:3">
              <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            </value>
          </structured-element>
        </value-structured>
      </attribute-value>
      <function command="" provided="0" name="init" ref="0xb7e34010" loc="63:basic/StdControl.nc">
        <documentation loc="58:basic/StdControl.nc">
          <short>&#10; Initialize the component and its subcomponents.&#10;&#10;</short>
          <long>&#10; Initialize the component and its subcomponents.&#10;&#10; @return Whether initialization was successful.&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e3fde0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <attribute-value>
          <attribute-ref name="empty" ref="0xb7e382d8"/>
          <value-structured>
            <type-tag size="I:0" alignment="I:1"><attribute-ref name="empty" ref="0xb7e382d8"/></type-tag>
          </value-structured>
        </attribute-value>
      </function>
      <function command="" provided="0" name="start" ref="0xb7e347e0" loc="70:basic/StdControl.nc">
        <documentation loc="65:basic/StdControl.nc">
          <short>&#10; Start the component and its subcomponents.&#10;&#10;</short>
          <long>&#10; Start the component and its subcomponents.&#10;&#10; @return Whether starting was successful.&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e3fde0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <attribute-value>
          <attribute-ref name="useful" ref="0xb7e38448"/>
          <value-structured>
            <type-tag size="I:8" alignment="I:4"><attribute-ref name="useful" ref="0xb7e38448"/></type-tag>
            <structured-element field="y" ref="0xb7e386d0">
              <value cst="S:start">
                <type-pointer size="I:4" alignment="I:4">
                  <type-int cname="char" size="I:1" alignment="I:1"></type-int>
                </type-pointer>
              </value>
            </structured-element>
            <structured-element field="x" ref="0xb7e38670">
              <value cst="I:1">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              </value>
            </structured-element>
          </value-structured>
        </attribute-value>
      </function>
      <function command="" provided="0" name="stop" ref="0xb7e34dc0" loc="78:basic/StdControl.nc">
        <documentation loc="72:basic/StdControl.nc">
          <short>&#10; Stop the component and pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10;</short>
          <long>&#10; Stop the component and pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return Whether stopping was successful.&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="result_t" ref="0xb7e3fde0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <attribute-value>
          <attribute-ref name="useful" ref="0xb7e38448"/>
          <value-structured>
            <type-tag size="I:8" alignment="I:4"><attribute-ref name="useful" ref="0xb7e38448"/></type-tag>
            <structured-element field="x" ref="0xb7e38670">
              <value cst="I:2">
                <type-int cname="int" size="I:4" alignment="I:4"></type-int>
              </value>
            </structured-element>
          </value-structured>
        </attribute-value>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
