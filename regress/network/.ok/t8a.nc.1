#define nx_struct struct
#define nx_union union
# 60 "/usr/local/avr/sys-include/inttypes.h"
typedef signed char int8_t;




typedef unsigned char uint8_t;
# 83 "/usr/local/avr/sys-include/inttypes.h" 3
typedef int int16_t;




typedef unsigned int uint16_t;










typedef long int32_t;




typedef unsigned long uint32_t;
#line 117
typedef long long int64_t;




typedef unsigned long long uint64_t;
#line 134
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 14 "/usr/local/lib/ncc/nesc_nx.h"
static __inline uint32_t __nesc_ntoh_uint32(void *source);
#line 36
static __inline int32_t __nesc_ntoh_int32(void *source);
#line 55
static __inline uint32_t __nesc_hton_uint32(void *target, uint32_t value);
#line 84
static __inline int32_t __nesc_hton_int32(void *target, int32_t value);








typedef struct { char data[1]; } __attribute__((packed)) nx_int8_t;
typedef struct { char data[2]; } __attribute__((packed)) nx_int16_t;
typedef struct { char data[4]; } __attribute__((packed)) nx_int32_t;
typedef struct { char data[8]; } __attribute__((packed)) nx_int64_t;
typedef struct { char data[1]; } __attribute__((packed)) nx_uint8_t;
typedef struct { char data[2]; } __attribute__((packed)) nx_uint16_t;
typedef struct { char data[4]; } __attribute__((packed)) nx_uint32_t;
typedef struct { char data[8]; } __attribute__((packed)) nx_uint64_t;
# 3 "t8a.nc"
int   main(void);
# 14 "/usr/local/lib/ncc/nesc_nx.h"
static __inline uint32_t __nesc_ntoh_uint32(void *source)
#line 14
{
  uint8_t *base = source;

#line 16
  return ((((uint32_t )base[0] << 24) | (
  (uint32_t )base[1] << 16)) | (
  (uint32_t )base[2] << 8)) | base[3];
}

#line 36
static __inline int32_t __nesc_ntoh_int32(void *source)
#line 36
{
  return __nesc_ntoh_uint32(source);
}

#line 55
static __inline uint32_t __nesc_hton_uint32(void *target, uint32_t value)
#line 55
{
  uint8_t *base = target;

#line 57
  base[3] = value;
  base[2] = value >> 8;
  base[1] = value >> 16;
  base[0] = value >> 24;
  return value;
}

#line 84
static __inline int32_t __nesc_hton_int32(void *target, int32_t value)
#line 84
{
  __nesc_hton_uint32(target, value);
  return value;
}

# 3 "t8a.nc"
int   main(void)
#line 3
{
  nx_int32_t a;
#line 4
  nx_int32_t b;

  __nesc_hton_int32(&(a, b), 3);
  __nesc_hton_int32(&(__nesc_ntoh_int32(&a) ? a : b), 4);
  return 0;
}

